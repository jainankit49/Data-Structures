       /***
        Problem 1:
	This problem was asked by Uber.
	Given an array of integers, return a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i.
	For example, if our input was [1, 2, 3, 4, 5], the expected output would be [120, 60, 40, 30, 24]. If our input was [3, 2, 1], the expected output would be [2, 3, 6].
	Follow-up: what if you can't use division?
	*/
	public static void productArrays(int [] nums) {
		int[] prefixProducts = new int[nums.length];
		int[] suffixProducts = new int[nums.length];
		int result[] = new int[nums.length];
		
		for(int i=0; i<prefixProducts.length; i++) {
			prefixProducts[i]=1;
			suffixProducts[i]=1;
		}
		
		for(int i=1;i<nums.length;i++) {
			prefixProducts[i] = nums[i-1]*prefixProducts[i-1];
		}
		
		for(int i=nums.length-2;i>=0;i--) {
			suffixProducts[i] = nums[i+1]*suffixProducts[i+1];
		}
		
		for(int i=0;i<nums.length;i++) {
			result[i] = suffixProducts[i]*prefixProducts[i];
		}
		
	}
	
	
	
	/***
	Problem 2:
	Given an array of integers, that are out of order, determine the bounds of the smallest window that must be sorted in order for the entire array to be sorted.
	For Example, given [3,7,5,6,9], you should return (1,3)
	*/
	public static void printUnsorted(int[] nums, int n) {
		int s=0, e=n-1, i, max, min;
		
		//Find s and e
		for(s=0; s<n-1;s++) {
			if(nums[s] > nums[s+1]) {
				break;
			}
		}
		if(s==n-1) {
			System.out.println("Array is already sorted");
		}
		
		for(e=n-1;e>0;e--) {
			if(nums[e-1]>nums[e]) {
				break;
			}
		}
		
		
		max = nums[s];
		min = nums[s];
		
		for(i=s+1;i<=e;i++) {
			if(nums[i]>max) {
				max = nums[i];
			}
			if(nums[i]<min) {
				min = nums[i];
			}
		}
		
		for(i=0;i<s;i++) {
			if(nums[i]>min) {
				s=i;
				break;
			}
		}
		
		for(i=n-1;i>=e+1;i--) {
			if(nums[i]<max) {
				e=i;
				break;
			}
		}
		System.out.println("(" +s + "," +e +")");
		
	}
	
	/***
	Problem 3: Calculate maximum sub array sum
	Given an array of numbers, find the maximum sum of any contiguous subarray of the array.
	For Example, given [34,-50,42,14,-5,86], the maximum sum would be 137, since we would take elements 42,14,-5 and 86.
	*/
	public int maxContiguousSubarraySum(int[] nums) {
		int max_so_far=0;
		int max_ending_here=0;
		
		for(int i=0; i<nums.length;i++) {
			max_ending_here = Integer.max(nums[i], nums[i]+max_ending_here);
			max_so_far = Integer.max(max_so_far, max_ending_here);
		}
		return max_so_far;
	}
